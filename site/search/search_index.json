{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>According to legend, the first maxim of the Oracle of Delphi - said to spring from Apollo himself - is to know yourself. Or in Greek: nosce te ipsum, temet nosce. Repeated twice for emphasis and for nuance. Know yourself, to your own self be known. To know and have knowledge of yourself and then to process that knowledge. To know and to accept.</p> <p>The purpose of what has been a decades-long interest for me is exactly that, but a little more. What value do the days 23 September 2004, or 8 July 1995, or 17 February 2017 have if they are remembered and known nowhere. Who were you on these days? We edit our lives like film editors, cutting out the boring bits - but are these not the foundation of who we are. The accumulation of a person are the days without monumental events - where a series of small and large decisions define you, who you were, and who you will be. And in that way this project is also a data diary of a person. In an age where social media networks, search engines, and a hungry horde of algorithms know us better than we know ourselves - this project is my redoubt. I should be the expert of myself, and I should endeavour to be better for that challenge.</p> <p>This documentation set covers the mechanism of collecting, analysing, and displaying information about myself to myself. As such, the primary reader is me - but if you find something of use, please feel free to use it. There will be typos, broken processes, and periods of inactivity - because life doesn't stop for measurements.</p> <p></p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"#principles","title":"Principles","text":"<p>Own all the data exclusively Avoid storing any data on external services, even temporarily. This especially applies to health data.</p> <p>Delete nothing Preserve all collected and validated data, as it may have an unimagined use in the future.</p> <p>Automate as much as possible Automate as much of the collection of data as possible to avoid influencing the results. The process should not impinge on the output.</p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"#data-collected","title":"Data collected","text":"<p>This list may grow and contract over time, as new data sources are added and others are hidden.</p> <p>Financial: Daily transactions (amount, time, date, category, subcategory, accounts, currency, location, brand, item, liquid balance), Investments (amount, asset type, region, growth/loss), Assets (details, cost, serial, logistics)</p> <p>Health: Exercise (reps, sets, exercises, bpm, location, weather), Metrics (heart rate, resting heart rate, average heart rate, weight, height, haemotocrit, haemoglobin, eosinophils, basophils, lymphocytes, monocytes, neutrophils, platelet count, red cell count, white cell count, mean cell haemoglobin, mean cell volume, mean cell volume, mean corpuscular haemoglobin, red blood width, esr, systolic, diastolic, waist circumference, body fat, chest circumference, thigh circumference, body fat mass, skeletal muscle mass, visceral fat, body water, total cholesterol, hdl cholesterol, ldl cholesterol, triglyceride, pGlucose fasting, anion gap, bicarbonate, chloride, potassium, sodium, urea, creatinine, b12, ferritin, tsh, freet4, thyroid peroxidase, eye axis, eye cylinder, eye sphere, vo2max, avgspo2, sperm motility, sperm count), Sleep (sleep phases, duration, location, weather, air pressure, ambient light, sleep time, awake time)</p> <p>Mental: Media (books, movies, tv, theatre, exhibitions), Productivity (focus sessions), Activities (reading, writing, media, art, games, meditation, technical, media, piano, design)</p> <p>Diagram: Data cycle</p> <p></p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"#roadmap","title":"Roadmap","text":"<p>Work on this project is planned and managed on this task board.</p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"financial/","title":"Financial","text":"<p>The financial aspect of the qSelf project tracks and processes expenses, investments, income, assets, and logistics:</p> <ul> <li>Expenses: The fundamental unit tracked is transactions. For more information see the Transactions page.</li> <li>Investment: The investment portfolio is tracked using transaction data, with extra information, and is stored in the investment table. For more information see the Investment page.</li> <li>Assets and Logistics: Records asset purchases and monitors their value, state, and location with a logistics component. For more information see the Assets page.</li> </ul>","tags":["HTML","JavaScript","CSS","Logic"]},{"location":"financial/#reconciliation","title":"Reconciliation","text":"<p>To keep financial information accurate, the reconciliation flows run on a set schedule to check that the liquid money available, investment portfolio value, asset value, and other balances correspond with the reality. This is the primary function of the <code>4 Finances</code> flow, which serves all the other financial subflows.</p> <p>TBC</p>","tags":["HTML","JavaScript","CSS","Logic"]},{"location":"financial/transactions/","title":"Transactions","text":""},{"location":"financial/transactions/#transactions","title":"Transactions","text":"<p>All financial tracking starts as a transaction, which has the following structure.</p> <p>| Parameter | Type | Description | Required |</p> <p>The logic for collecting transactions is handled by the <code>4a Transactions</code> flow in Automate, which presents an input form, returns the data via query parameters, and enriches the data with exchange rate information, where necessary, and unit cost calculations.</p> <p>TBC</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>The qSelf project is made up of a number of inter-connected components:</p> <ul> <li>Logical components: These are responsible for the logical progression of flows, moving data from screens and sensors to the database and further on to displays.</li> <li>Sensory components: These components collect external data from various sensors (mostly from the smartwatch).</li> <li>Input and Display components: These are responsible for receiving manually inputted data that supplements sensory data. The display components display the processed data on dashboards and reports.</li> <li>Analytical components: These components take the received data and parse it into useful information.</li> <li>Storage and Sync components: These components take data and store it in the SQLCipher database or in temp files for quick retrieval.</li> </ul> <p>Components are immutable, but the tools that make them work are replaceable and interchangeable.</p> <p>Diagram: Topology of the qSelf system</p> <p></p>"},{"location":"getting-started/#install","title":"Install","text":""},{"location":"getting-started/#1-install-all-applications-and-tools","title":"1. Install all applications and tools","text":"<p>Install all applications in the toolset table. This includes CLI tools that are listed in the Termux row, and plugins for Automate.</p>"},{"location":"getting-started/#2-clone-the-project-repo","title":"2. Clone the project repo","text":"<p>Clone the project repo to the root of your user space on your mobile device using Termux and the following commands:</p> <pre><code>cd /storage/emulated/0/\ngit clone git@github.com:gugulet-hu/qself-process.git\n</code></pre>"},{"location":"getting-started/#3-import-flows-into-automate-and-displays-into-kustom","title":"3. Import flows into Automate and displays into Kustom","text":"<p>Import the <code>latest.flo</code> files in each of the directories in the qself-process/Automate/ folder. Inside Automate, the dot menu in the top-left corner includes the option to Import. Import the files in the qself-process/Kustom/wallpapers/ folder into KLWP and import the files in the qself-process/Kustom/watchfaces/ folder into KWCH.</p>"},{"location":"getting-started/#4-configure-the-root-settings","title":"4. Configure the root settings","text":"<p>Configure the root settings in qself-process/Automate/.demo-config.json file and rename the file to .config.json.</p>"},{"location":"getting-started/#5-start-the-1-context-flow-in-automate","title":"5. Start the <code>1 Context</code> flow in Automate","text":""},{"location":"getting-started/#toolset","title":"Toolset","text":"Component Tool Device Description Install Learn Logical Python Python is a general purpose programming language used for data analysis and various scripts. Python TreeHouse Automate Automate is a graphical code tool to create and manage logic on the mobile device. The project also requires these Tasker plugins: AutoWear, AutoInput, Termux:Tasker, Sleep as Android, and Kustom (the last two apps come with their respective Automate plugins). Google Play LlamaLab Sensory wearOS device Any wearOS compatible smartwatch. The TicWatch Pro 5 is recommended for its battery life and general ease of use. It can also be rooted quite easily, unlike Samsung devices. TicWatch Android smartphone The smartphone is a fallback option for certain types of sensory input, such as Steps. The Pixel series is a lean option without the junkware from other Android device manufacturers. You can overlay it with Graphene OS to somewhat protect yourself from Google tracking and annoyances. Pixel Sleep as Android This app is the most reliable sleep tracker for Android. Make sure to turn off the features that send your data to the developer. It is deeply integrated into the way the sleep track flow works. Google Play Docs Input and Display HTML HTML is required foundational knowledge to create web screens to accept manual inputs. CSS CSS is required foundational knowledge to create web screens to accept manual inputs. Better yet, Sass to manage the complexity of some of the input screens. JavaScript JavaScript is required foundational knowledge to create web screens to accept manual inputs. Some JS is also required for using advanced Automate techniques. KLWP Kustom Live Wallpaper allows you to create interactive home screens and is a pretty powerful logical engine of its own. Most of the data is piped to the home screen dashboard for easy access. Google Play Kustom KWCH Kustom Watch Face allows you to create watch faces using the Kustom interface. Like KLWP, it is also capable of doing logical operations. Google Play Kustom Analytical TBA Storage and Sync SQLCipher SQLCipher is the secure version of SQLite. The commands and queries are largely the same, except for the parts to access the database. GitHub Zetetic TablePlus GUI tool for relational databases. In this project used to manually edit the database when things go wrong. Also useful to create queries. TablePlus Docs Termux Termux is a terminal for Android that allows you to send commands for many popular application. For this project it is used for git commands and a couple of advanced techniques. The following packages are installed using the <code>pkg install &lt;package&gt;</code> command: curl, gh, git, gnupg, gnuplot, imagemagick, openssl, pinentry, python, sqlcipher, termux-api, and termux-tools. GitHub Termux iTerm2 iTerm is my preferred console for macOS. See the description for Termux for which CLI tools to install using the command <code>brew install &lt;package&gt;</code>. Homebrew will also need to be installed. iTerm Docs Syncthing Syncthing syncs folders and files across devices. Used to keep the project files updated between the laptop and the smartphone. Syncthing Docs"},{"location":"health/exercise/","title":"Test","text":""},{"location":"health/metrics/","title":"Test","text":""},{"location":"health/sleep/","title":"Test","text":""},{"location":"mental/emotional/","title":"Test","text":""},{"location":"mental/media/","title":"Test","text":""},{"location":"mental/productivity/","title":"Test","text":""},{"location":"spread-ai/","title":"Using SPREAD Studio locally","text":"<p>Using the SPREAD Studio application on your local environment allows you to test, debug, and work on your application before deploying it for general use. We generally recommend that you maintain version control of your application using git. For more on version control, see the Version Control at Spread page.</p>"},{"location":"spread-ai/#setting-up-your-local-environment","title":"Setting up your local environment","text":"<p>To create and manage applications locally you need to have the following tools and knowledge:</p> <ul> <li>An understanding of how to make queries to your database.</li> <li>A code or text editor to edit your application. We recommend using Visual Studio Code, with the XYZ plugin installed for easy code completion.</li> <li>A Spread API key to fetch remote data. Create a separate API key with limited access rights for your local environment to limit the possibility of a security breach. For more on API keys, see Creating and Managing API Keys.</li> </ul>"},{"location":"spread-ai/#restrictions-and-security","title":"Restrictions and security","text":"<p>Running the local application has limitations that may affect your workflow:</p> <ul> <li>Eros in cursus turpis massa. Convallis aenean et tortor at risus viverra adipiscing at in.</li> <li>Aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices sagittis.</li> <li>Urna id volutpat lacus laoreet non curabitur. Urna neque viverra justo nec ultrices.</li> <li>Eu mi bibendum neque egestas congue quisque egestas diam in. Arcu cursus euismod quis viverra nibh cras pulvinar mattis nunc.</li> <li>Commodo elit at imperdiet dui. Enim nec dui nunc mattis enim ut.</li> </ul> <p>Warning</p> <p>Data is not encrypted at rest. Please ensure that your local disk is encrypted and that your workspace is secure.</p>"},{"location":"spread-ai/#quickstart","title":"Quickstart","text":"<p>This quickstart guide will introduce you to some of the main features of SPREAD Studio - such as making data queries, styling your application, and deploying it to production. Before starting, make sure that your local environment is set up correctly. The process is laid out in the diagram, with more detail in the list items.</p> <pre><code>graph LR\n  A([Create a new application&lt;br&gt; &lt;a href=\"\"&gt;Steps 1 - 3&lt;/a&gt;]) --&gt; B([Ingest data and add query&lt;br&gt; &lt;a href=\"\"&gt;Steps 4 - 5&lt;/a&gt;]) --&gt; C([Style application and push to GitHub&lt;br&gt; &lt;a href=\"\"&gt;Steps 6 - 8&lt;/a&gt;]);</code></pre>"},{"location":"spread-ai/#1-run-your-local-setup","title":"1. Run your local setup","text":"<p>Start the process by running your local setup with the command <code>kubectl get pod</code> in your terminal or console inside the platform folder of your working directory. If your environment has been set up correctly, it should show something similar to following output.</p> <p></p> <p>You can then open studio.local.spread.ai in your browser to access SPREAD Studio. The landing page for SPREAD Studio will show your workspace, with your current applications. This workspace is automatically created when you deploy applications.</p>"},{"location":"spread-ai/#2-create-a-new-workspace","title":"2. Create a new workspace","text":"<p>To create a new application select + New workspace and set the details of the workspace by accessing the dot menu on the right-hand side. You can change the workspace name, edit Settings, add Members to the workspace, and do other workspace management tasks through this menu.</p> <p></p> <p>Once the workspace has been configured to your needs select the + New button to start creating your application.</p>"},{"location":"spread-ai/#3-configure-your-new-application","title":"3. Configure your new application","text":"<p>The application configuration screen will pop up. On the top-left, where the text reads Untitled Application 1, you can select the title to access the settings menu. on the left-hand side you will find the elements that you can use to create your application, such as Widgets, Queries/JS, and Datasources. The central area of the screen is where you can drag widgets and move elements to create the UI of your application. The right-hand side of the screen will contain the properties of the selected element. On the top-right you can find options to Deploy the application.</p> <p></p>"},{"location":"spread-ai/#4-ingest-data-to-populate-your-application","title":"4. Ingest data to populate your application","text":"<p>For this guide, we will ingest data by selecting the Explorer tab on the right-hand side and then selecting + New datasource in the Datasources section. This will open options to select the type of data source you would like to ingest data from. Select Authenticated GraphQL API. In the following screen enter \"http://local.spread/ein\" (without quotes) in to the URL field and select the Save button in the bottom-right corner. This is a data source URL we use strictly for demonstrations.</p>"},{"location":"spread-ai/#5-make-a-data-query-to-return-a-slice-of-the-dataset","title":"5. Make a data query to return a slice of the dataset","text":"<p>Select the Explorer tab on the right-hand side and then select + New query/JS. In the query box you can add a query to return only the data we need. For our purposes we will be using the following data query:</p> <pre><code>query {\n        datasets {\n                edges {\n                        node {\n                                id\n                                name\n                                description\n                        }\n                }\n        }\n}\n</code></pre> <p>Once you have entered the query, you can select the Run button to run the query. The results of the query will display in the Response tab at the bottom of the screen.</p> <p></p> <p>Please Note</p> <pre><code>You can create your own query by going to [local.spread.ai/ein](http://local.spread.ai/ein) and playing with the interactive query creator.\n</code></pre>"},{"location":"spread-ai/#6-display-the-data","title":"6. Display the data","text":"<p>Widgets to display the data are under the Widgets tab. For this demo we will use the Table widget. Drag and drop the widget onto the central area of the screen. You will see that the Properties window on the right-hand side now has options for configuring your table. Under the Data section and in the Table data field enter query object created in Step 4. In our example the value is <code>{{get_datasets.data.data.datasets.edges.map(e =&gt; e.node)}}</code>.</p> <p></p> <p>You can also change the column order, make the columns editable, hide columns, and other options in the Properties window.</p>"},{"location":"spread-ai/#7-style-your-application","title":"7. Style your application","text":"<p>To set fonts, colours, borders, shadows, theme and other style settings click an open space in the central area. This brings up the options for styling the whole application in the Properties window on the right-hand side under App settings - and not just the Properties for a particular widget. You can also add widgets - such as buttons and headers - to make your user interface easy to use.</p> <p>To preview your application select Deploy in the top-right corner. For more information on Styling, see section...</p>"},{"location":"spread-ai/#8-add-your-application-to-the-launcher-page","title":"8. Add your application to the launcher page","text":"<p>The default landing page for SPREAD Studio in a local environment is local.spread.ai. To add your newly created application to this launcher page we need to connect our local copy of the application to a GitHub repository. Select the small arrow next to the Deploy button in the top-right corner.</p> <p></p> <p>For more information on creating GitHub repositories and keys, see Create a Repo. Any further changes to your application can be pushed to the connected repository when you select the Deploy button or when you push a commit from the working directory to GitHub.</p> <p>Download the build.yml GitHub Action and add it to your applications repository. This action will run when you deploy any changes to GitHub. For more information on creating and running Actions, see Creating Actions. One of the actions of build.yml is to generate a JSON file that is pushed to Amazon AWS.</p> <p>...</p>"},{"location":"spread-ai/#troubleshooting","title":"Troubleshooting","text":"<p>Common problem scenario 1 Aliquam non erat leo. Pellentesque eu consectetur ex. Aenean risus orci, lobortis ac tempor at, venenatis at mi. Nulla sed venenatis velit, posuere lacinia neque. Morbi tortor orci, blandit et mollis vitae, finibus et nisl. Etiam sed justo sem. Proin eget pretium risus. Fusce tempor nisl quam, id dapibus urna viverra et. Nam efficitur nisi eu molestie varius. Morbi ac scelerisque magna. Donec efficitur quam eleifend faucibus bibendum. Fusce quis dolor nulla. Maecenas nec cursus velit. Nunc vulputate leo a mi ullamcorper bibendum.</p> <p>Common problem scenario 2 In hac habitasse platea dictumst. Aenean tempus felis vel metus sodales, nec tristique sapien efficitur. Aenean pharetra ante quis posuere interdum. Aliquam erat volutpat. Integer vulputate, velit commodo mollis pellentesque, augue risus vestibulum metus, at faucibus ipsum felis quis magna. Nam in congue massa. Pellentesque a vehicula arcu. Nulla auctor, lectus sed consequat convallis, ligula dui faucibus tellus, vel vulputate massa ligula nec risus.</p> <p>Common problem scenario 3 Curabitur eget porta risus. Fusce egestas tortor ut aliquet facilisis. Suspendisse quis sollicitudin eros, vel malesuada erat. Donec ac purus ullamcorper, lobortis nisi ut, bibendum elit. Fusce gravida sapien eu metus vulputate pulvinar. Curabitur nisi leo, mollis eu fringilla at, interdum accumsan quam. Praesent a fermentum massa. In finibus mollis sapien, a rhoncus turpis porttitor a. Praesent feugiat felis lacinia lacus accumsan, nec suscipit urna pellentesque. Proin metus nulla, mattis ac arcu vitae.</p> <p> Last reviewed by Gauthier Ralph, Value Engineer (2020.01.10).  This page is owned by Phileas Fogg, Junior Platform Engineer. If you don't understand the contents of this page or if the content is outdated, please help us make it better by emailing phileasf@spread.ai or post a message to the #ask-platform-team channel on Slack. Alternatively, you can create a ticket on the documentation board and assign it to Jean Passepartout.</p>"}]}