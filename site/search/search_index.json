{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>According to legend, the first maxim of the Oracle of Delphi - said to spring from Apollo himself - is to know yourself. Or in Greek: nosce te ipsum, temet nosce. Repeated twice for emphasis and for nuance. Know yourself, to your own self be known. To know and have knowledge of yourself and then to process that knowledge. To know and to accept.</p> <p>The purpose of what has been a decades-long interest for me is exactly that, but a little more. What value do the days 23 September 2004, or 8 July 1995, or 17 February 2017 have if they are remembered and known nowhere. Who were you on these days? We edit our lifes like film editors, cutting out the boring bits - but are these not the foundation of who we are. The accumulation of a person are the days without monumental events - where a series of small and large decisions define you, who you were, and who you will be. And in that way this project is also a data diary of a person. In an age where social media networks, search engines, and a hungry horde of algorithms know us better than we know ourselves - this project is my redoubt. I should be the expert of myself, and I should endeavour to be better for that challenge.</p> <p>This documentation set covers the mechanism of collecting, analysing, and displaying information about myself to myself. As such, the primary reader is me - but if you find something of use, please feel free to use it. There will be typos, broken processes, and periods of inactivity - because life doesn't stop for measurements.</p> <p></p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"#principles","title":"Principles","text":"<p>Own all the data exclusively Avoid storing any data on external services, even temporarily. This especially applies to health data.</p> <p>Delete nothing Preserve all collected and validated data, as it may have an unimagined use in the future.</p> <p>Automate as much as possible Automate as much of the collection of data as possible to avoid influencing the results. The process should not impinge on the output.</p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"#data-cycle","title":"Data cycle","text":"","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"#data-collected","title":"Data collected","text":"<p>This list may grow and contract over time, as new data sources are added and others are hidden.</p> <p>Financial: Daily transactions (amount, time, date, category, subcategory, accounts, currency, location, brand, item, liquid balance), Investments (amount, asset type, region, growth/loss), Assets (details, cost, serial, logistics)</p> <p>Health: Exercise (reps, sets, exercises, bpm, location, weather), Metrics (heart rate, resting heart rate, average heart rate, weight, height, haemotocrit, haemoglobin, eosinophils, basophils, lymphocytes, monocytes, neutrophils, platelet count, red cell count, white cell count, mean cell haemoglobin, mean cell volume, mean cell volume, mean corpuscular haemoglobin, red blood width, esr, systolic, diastolic, waist circumference, body fat, chest circumference, thigh circumference, body fat mass, skeletal muscle mass, visceral fat, body water, total cholesterol, hdl cholesterol, ldl cholesterol, triglyceride, pGlucose fasting, anion gap, bicarbonate, chloride, potassium, sodium, urea, creatinine, b12, ferritin, tsh, freet4, thyroid peroxidase, eye axis, eye cylinder, eye sphere, vo2max, avgspo2, sperm motility, sperm count), Sleep (sleep phases, duration, location, weather, air pressure, ambient light, sleep time, awake time)</p> <p>Mental: Media (books, movies, tv, theatre, exhibitions), Productivity (focus sessions), Activities (reading, writing, media, art, games, meditation, technical, media, piano, design)</p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"#roadmap","title":"Roadmap","text":"<p>Work on this project is planned and managed on this task board.</p>","tags":["HTML","JavaScript","CSS","Python","Shell","Logic","Manual","Database","Collect","Validate","Display","Sync","Analyse","Predict","Watch","Mobile","Laptop"]},{"location":"getting-started/","title":"Getting Started","text":"<p>The qSelf project is made up of a number of inter-connected components:</p> <ul> <li>Logical components: These are responsible for the logical progression of flows, moving data from screens and sensors to the database and further on to displays.</li> <li>Sensory components: These components collect external data from various sensors (mostly from the smartwatch).</li> <li>Input and Display components: These are responsible for receiving manually inputted data that supplements sensory data. The display components display the processed data on dashboards and reports.</li> <li>Analytical components: These components take the received data and parse it into useful information.</li> <li>Storage and Sync components: These components take data and store it in the SQLCipher database or in temp files for quick retrieval.</li> </ul> <p>Components are immutable, but the tools that make them work are replaceable and interchangeable.</p>"},{"location":"getting-started/#topology","title":"Topology","text":""},{"location":"getting-started/#toolset","title":"Toolset","text":"<p>The current toolset consists of the following. Each tool needs to be installed and you need to have a working knowledge of how to use them.</p> Component Tool Device Description Install Learn Logical Python Python is a general purpose programming language used for data analysis and various scripts. Python TreeHouse Automate Automate is a graphical code tool to create and manage logic on the mobile device. The project also requires these Tasker plugins: AutoWear, AutoInput, Termux:Tasker, Sleep as Android, and Kustom (the last two come with their respective apps). Google Play LlamaLab Sensory wearOS device Any wearOS compatible smartwatch. The TicWatch Pro 5 is recommended for its battery life and general ease of use. It can also be rooted quite easily, unlike Samsung devices. TicWatch Android smartphone The smartphone is a fallback option for certain types of sensory input, such as Steps. The Pixel series is a lean option without the junkware from other Android device manufacturers. You can overlay it with Graphene OS to somewhat protect yourself from Google tracking and annoyances. Pixel Input and Display HTML HTML is required foundational knowledge to create web screens to accept manual inputs. CSS CSS is required foundational knowledge to create web screens to accept manual inputs. Better yet, Sass to manage the complexity of some of the input screens. JavaScript JavaScript is required foundational knowledge to create web screens to accept manual inputs. Some JS is also required for using advanced Automate techniques. KLWP Kustom Live Wallpaper allows you to create interactive home screens and is a pretty powerful logical engine of its own. Most of the data is piped to the home screen dashboard for easy access. Google Play Kustom KWCH Kustom Watch Face allows you to create watch faces using the Kustom interface. Like KLWP, it is also capable of doing logical operations. Google Play Kustom Analytical TBA Storage and Sync SQLCipher SQLCipher is the secure version of SQLite. The commands and queries are largely the same, except for the parts to access the database. GitHub Zetetic TablePlus GUI tool for relational databases. In this project used to manually edit the database when things go wrong. Also useful to create queries. TablePlus Docs Termux Termux is a terminal for Android that allows you to send commands for many popular application. For this project it is used for git commands and a couple of advanced techniques. GitHub Termux Syncthing Syncthing syncs folders and files across devices. Used to keep the project files updated between the laptop and the smartphone. Syncthing Docs"},{"location":"health/","title":"Test","text":""},{"location":"health/exercise/","title":"Test","text":""},{"location":"health/metrics/","title":"Test","text":""},{"location":"health/sleep/","title":"Test","text":""},{"location":"mental/","title":"Test","text":""},{"location":"mental/emotional/","title":"Test","text":""},{"location":"mental/media/","title":"Test","text":""},{"location":"mental/productivity/","title":"Test","text":""},{"location":"spread-ai/","title":"Setting up your local environment","text":"<p>Working with the Spread AI application on your local environment allows you to test, debug, and work on your application before deploying it for general use. We recommend that </p>"}]}